1a
```{r}

student<-read.csv('Q1a.csv',header=TRUE)
head(student)
```

QUESTION 1
a. Extract each dept students names separately
```{r}
aggregate(Name~Dept.Name,data=student,toString)

```

b. Extract S grade scores in all subjects in each dept seperately.
```{r}
s<-student[student$Sub1=="S"|student$Sub2=="S"|student$Sub3=="S"|student$Sub4=="S"|student$Sub5=="S",c("Name","Dept.Name")]
aggregate(Name~Dept.Name,data=s,toString)
```

c. Extract students who have scored at least S grades in any 2 subjects
```{r}
student[rowSums(student=="S")>1,c("Name","Dept.Name")]

```

d. Extract students who have scored above 9 SGPA in each dept
```{r}
s1<-student[student$SGPA>9,c("Name","Dept.Name")]
aggregate(Name~Dept.Name,data=s1,toString)

```
1b
```{r}
faculty<-read.csv('Q1b.csv',header=TRUE)
head(faculty)

```

a. extract each dept faculty details separately
```{r}
aggregate(Name~Dept,data=faculty,toString)
```

b. extract Professors of each dept seperately
```{r}
prof<-faculty[faculty$Designation=="Professor",c("Name","Dept")]
aggregate(Name~Dept,data=prof,toString)
```

c. extract people who earn more than 1.5 lakh in each dept where their designation is prof,associate or assistant
```{r}
ppl<-faculty[faculty$Salary>150000,c("Name","Dept")]
aggregate(Name~Dept,ppl,toString)

```

d.Find out the cost of professors in each dept .(sum up their salary to get cost of them)
```{r}
prof=faculty[faculty$Designation=="Professor",]
aggregate(Salary~Dept,prof,sum)


```

e. Find the cost of each dept faculty
```{r}
aggregate(Salary~Dept,faculty,sum)

```

f. Find out the average cost of faculty in each dept.
```{r}
aggregate(Salary~Dept,faculty,mean)
```

g.Which dept has highest average cost of faculty
```{r}
avg_sal<-aggregate(Salary~Dept,faculty,mean)
avg_sal[which.max(avg_sal$Salary),]

```

i. Which dept has lowest cost of faculty
```{r}
val<-aggregate(Salary~Dept,faculty,mean)
val[which.min(val$Salary),]


```
2a

```{r}
student<-read.csv('Q2a.csv',header=TRUE)
head(student)
```

i. Store students marks numerically, transform into grades and store in new dataframe
```{r}

calculateGrade <- function(mark) 
{
  m<-c()
  for(x in mark)
  {
  if(x >= 80) {
    res <- "A"
  } else if(x >= 60 & x<80) {
    res <- "B"
  } else if(x >= 40 & x<60) {
    res <- "C"
  } else {
    res <- "D"
  }
  m<-c(m,res)
  }
  m
}

for(i in 1:nrow(student))
{
 s1<-student[,"Sub1"]
 s2<-student[,"Sub2"]
 s3<-student[,"Sub3"]
 s4<-student[,"Sub4"]
 s5<-student[,"Sub5"]
 g1=calculateGrade(s1)
 g2=calculateGrade(s2)
 g3=calculateGrade(s3)
 g4=calculateGrade(s4)
 g5=calculateGrade(s5)
}
ans<-data.frame(student$Names,student$USN,student$Dept,g1,g2,g3,g4,g5)
ans

```

ii. Check whether students grades are identical or not in each subject
```{r}
identical(ans$g1,ans$g2)
```

Extract students' marks in each subject separately. If the student has scored greater than 80 map it as "good", if it is between (80 and 60) map it as "moderate", if it is between (40 and 60) map it as "need improvement", else map it as "poor".
```{r}
assignComment <- function(mark) 
{
  x<-sum(mark)/5
  
  if(x >= 80) {
    res <- "Good"
  } else if(x >= 60 & x<80) {
    res <- "Moderate"
  } else if(x >= 40 & x<60) {
    res <- "Need Improvement"
  } else {
    res <- "Poor"
  }
  res
}
for(i in 1:nrow(student))
{
 s1<-student[i,"Sub1"]
 s2<-student[i,"Sub2"]
 s3<-student[i,"Sub3"]
 s4<-student[i,"Sub4"]
 s5<-student[i,"Sub5"]
 
 mark<-c(s1,s2,s3,s4,s5)
 ans<-assignComment(mark)
 student[i,"Comment"]<-ans
 }
 
student
```

Consider dataset given in (1.a) , map the S,A, grades as " GOOD"; map ,B,C grades
as "average", D,E grades as "below average"; 'F' grade as "poor".
```{r}
calculateGrade <- function(x) {
  if(x == 'S' | x == 'A') {
    res <- "Good"
  } else if(x == 'B' | x == 'C') {
    res <- "Average"
  } else if(x == 'D' | x == 'E') {
    res <- "Below Average"
  } else {
    res <- "Poor"
  }
  res
}
for(i in 1:nrow(student))
{
 g<-student[i,"Grade"]
 

 ans<-calculateGrade(g)
 student[i,"Grade_Comment"]<-ans
 }
 
student


```

Transform dept names to numerical data.
```{r}
stud1<-transform(student,Dept=as.numeric(Dept))
stud1

```

Using factor() and mapvalues() convert dept names to numerical data.
```{r}

stud2<-transform(student,Dept=as.factor(mapvalues(Dept,c("CSE","ISE"),c(1,2))))
stud2
```

Create table from student data with USN and names only.
```{r}

table(student$Names,student$USN)
```

Display the typeof each column.
```{r}
sapply(student,typeof)

```

Write separate functions to perform all the above functions separately and call them in R script.

Write a function to perform statistical analysis of students data.
```{r}
Summary_sub <- function(x) {
  ans<-c(mean=mean(x), median=median(x), sd=sd(x))
  ans
}

sub2<-student$Sub2
ans<-Summary_sub(sub2)
ans



```

Use sapply to perform 1.c, 1d
```{r}
calculateResult <- function(x) {
  if(x >= 80) {
    res <- "Good"
  } else if(x >= 60 & x<80) {
    res <- "Moderate"
  } else if(x >= 40 & x<60) {
    res <- "Need Improvement"
  } else {
    res <- "Poor"
  }
  res
}

sub1=student$Sub1
sub1
ans<-sapply(sub1,FUN=calculateResult)
d<-data.frame(student$Names,ans)
d
```
3a
```{r}

faculty<-read.csv('Q3a.csv',header = TRUE)
head(faculty)
```

a. Store faculty salary numerically, transform into factor.( eg. 50000 to 75000 as 1, 75000 to 100000 as 2 , and so on)
```{r}
fac_cut<-cut(faculty$Salary, breaks=c(50000, 75000, 100000, 125000,150000,175000,200000,Inf))
str(fac_cut)

```

b. Check whether faculty paper publication count and number of training program
attended are same or not.
```{r}
identical(faculty$Papers.Published,faculty$Training)

```

c. Extract paper published count separately. If the count is grater than 15 map it as "Excellent", if it is (10-15 )map it as "good", if it is (5 to 10) map it as " moderate"), if it is (1-5) map it as "need to improve", else "poor, start your research".
```{r}
assignComment <- function(x) 
{
 if(x >= 15) {
    res <- "Excellent"
  } else if(x >= 10 & x<15) {
    res <- "Good"
  } else if(x >= 5 & x<10) {
    res <- "Moderate"
  } else if(x>=1 & x<5){
    res <- "Need to improve"
  }
  else{
    res<-"Poor,start your research"
  }
  res
}

for(i in 1:nrow(faculty))
{
 papers<-faculty[i,"Papers.Published"]
 ans<-assignComment(papers)
 faculty[i,"Comment"]<-ans
 }
 
faculty
```

d. Consider the solution of 1c. Map "Excellent", "good" as " Good performers".
Map " Moderate" and "need to improve" as " Ok, Keep it up". Else " map to " You may be fired!"
```{r}
assignImplication <- function(x) 
{
 if(x =="Excellent"| x=="Good") {
    res <- "Good Perfformers"
  } else if(x =="Moderate" | x=="Need to improve") {
    res <- "Ok,Keep it up"
  } 
  else{
    res<-"You may be fired!"
  }
  res
}
for(i in 1:nrow(faculty))
{
 comment<-faculty[i,"Comment"]
 ans<-assignImplication(comment)
 faculty[i,"Implication"]<-ans
 }
 
faculty

```

e. Transform designations to numerical data
```{r}
fac1<-transform(faculty,Designation=as.numeric(Designation))
fac1

```

f. Using factor() and mapvalues() convert designations to numerical data.
```{r}
fac2<-transform(faculty,Designation=as.factor(mapvalues(Designation,c("Professor","Assistant Professor","Assosciate Professor"),c(1,2,3))))
fac2

```

g. create table for faculty names and designations.
```{r}
table(faculty$Name,faculty$Designation)

```

h.Write separate functions to perform all the above functions separately and call them in R script.

i. Write a function to perform statistical analysis of faculty data to identify faculty performance of depts.
```{r}

Summary_fac <- function(x) {
  ans<-c(mean=mean(x), median=median(x), sd=sd(x))
  ans
}

f<-faculty[faculty$Dept=="CSE",]
ans<-Summary_sub(f$Papers.Published)
ans

f1<-faculty[faculty$Dept=="ISE",]
ans<-Summary_sub(f1$Papers.Published)
ans
```

j. Use sapply to perform all the above functions.
```{r}
assignComment <- function(x) 
{
 if(x >= 15) {
    res <- "Excellent"
  } else if(x >= 10 & x<15) {
    res <- "Good"
  } else if(x >= 5 & x<10) {
    res <- "Moderate"
  } else if(x>=1 & x<5){
    res <- "Need to improve"
  }
  else{
    res<-"Poor,start your research"
  }
  res
}


 papers<-faculty[,"Papers.Published"]
 ans<-sapply(papers,FUN=assignComment)
 f<-data.frame(faculty$Name,ans)
 
 
f
```

```{r}
assignImplication <- function(x) 
{
 if(x =="Excellent"| x=="Good") {
    res <- "Good Perfformers"
  } else if(x =="Moderate" | x=="Need to improve") {
    res <- "Ok,Keep it up"
  } 
  else{
    res<-"You may be fired!"
  }
  res
}

 comment<-faculty[,"Comment"]
 ans<-sapply(comment,FUN=assignImplication)
 f2<-data.frame(faculty$Name,ans)
 
 
f2
```
4a
```{r}
student<-read.csv('Q1a.csv',header = TRUE)
head(student)

```

i. Plot , in each dept, how many students have scored above 9 SGPA
```{r}
s<-student[student$SGPA>9,c("Name","Dept.Name")]
s
plot(table(s$Dept.Name))

```

ii. Create subset of students , who have scored S grade in any subject and failed in any subject.
```{r}
sub<-subset(student,rowSums(student=="S")>=1 & rowSums(student=="F")>=1)
sub
```

iii.Find out average SGPA of each dept students.
```{r}
aggregate(SGPA~Dept.Name,student,mean)

```

iv.Find out average score of each subject for each dept.
```{r}
aggregate(Sub1~Dept.Name,student,mean)

```

v. Extract 10 toppers of each dept.
```{r}


```

vi. Sort students details of each dept separately.
```{r}
student[order(student$Dept.Name,student$Name),]
```

vii.Search for a particular student name in the data set, and retrieve his/her details
```{r}
subset(student,Name=="Aravind")
```
4b
```{r}
faculty<-read.csv('Q3a.csv',header=TRUE)
head(faculty)
```

Plot, in each dept, how many faculty are earning more than 1 lakh.
```{r}
f<-faculty[faculty$Salary>100000,c("Name","Dept")]
f
plot(table(f$Dept))

```

create subset of faculty, who have published more than 10 papers and their designation is Associate professor.
```{r}
sub<-subset(faculty,Designation=="Assosciate Professor" & Papers.Published>4)
sub

```

Find out average papers published by each dept, designation wise
```{r}
a<-aggregate(Papers.Published~Dept+Designation,faculty,mean)
a
```

Find out Average training programs attended by faculty each dept wise.
```{r}
aggregate(Training~Dept,faculty,mean)

```

v. Extract top 3 performers among faculty dept wise(more papers published and more
training programmes attended)
```{r}

```

vi. Sort faculty details , dept wise separately
```{r}
faculty[order(faculty$Dept,faculty$Name),]

```

vii. Search for faculty name in the data set and retrive his/her details
```{r}
subset(faculty,Name=="Mithra")

```
5a
```{r}
f<-read.csv('Llaabb-4.csv',header=TRUE)
f
```

Change the column names of faculty data set. 
```{r}
colnames(f)<-c("Names","Desig","Sal","Department","Trainings","Papers","Gender")
summary(f)

```

Use map values() , as.factor() and transform ()
??? to change the designation column to have numerical values. 1- Prof, 2-Asso.Prof,3-Asst.Prof;
??? to change gender column 1-Male, 2-Female
```{r}
library(plyr)
f<-transform(f,
             Desig=as.factor(mapvalues(Desig,c("Professor","Assosciate Professor","Assistant Professor"),c(1,2,3))),
             Gender=as.factor(mapvalues(Gender,c("M","F"),c(1,2))))
f

```

Using with() and tapply() , calculate the mean training programs attended and no. of papers published in each department. Format it for markdown.
```{r}
library(knitr)
library(rmarkdown)
kable(with(f,tapply(Trainings, INDEX=list(Department,Papers),FUN=mean)),format="markdown")


kable(with(f,tapply(Trainings, INDEX=list(Department,Gender),FUN=mean)),format="markdown")

kable(with(f,tapply(Papers, INDEX=list(Department,Gender),FUN=sum)),format="markdown")
```

Using with() and aggregate() , calculate the mean training programs attended and no. of papers published in each department. Format it for markdown.
```{r}
kable(with(f,aggregate(Trainings,by=list(Department,Papers),FUN=mean)),format="markdown")

kable(with(f,aggregate(Trainings,by=list(Department,Gender),FUN=mean)),format="markdown")

kable(with(f,aggregate(Papers,by=list(Department,Gender),FUN=sum)),format="markdown")
```

Check whether the mean value of no. of papers published in depts. are influenced by training programs attended and designation. Do regression analysis using aggregate().
```{r}
aggregate(Papers~Trainings+Desig,FUN=mean, data=f)

```

Create the table output for designation and papers published. Use with() and table().
```{r}
ans<-with(f,table(Papers,Desig))
ans
```

Find the odds of lower no. of paper published with respect to designation and no.of training programs attended using the output of question (f).
```{r}
ans.or<-as.numeric(ans[1,1])/as.numeric(ans[1,2])/as.numeric(ans[1,3])/as.numeric(ans[2,1])/as.numeric(ans[2,2])/as.numeric(ans[2,3])/as.numeric(ans[3,1])/as.numeric(ans[3,2])/as.numeric(ans[3,3])/as.numeric(ans[4,1])/as.numeric(ans[4,2])/as.numeric(ans[4,3])/as.numeric(ans[5,1])/as.numeric(ans[5,2])/as.numeric(ans[5,3])/as.numeric(ans[6,1])/as.numeric(ans[6,2])/as.numeric(ans[6,3])
ans.or
```

Is the designation affects the training programs attended? Check it with the data. Prove it
```{r}
with(f,cor(as.numeric(Desig), Trainings))

```

Find the correlation of papers published and training programs attended using with(), cor().
```{r}
with(f,cor(Papers, Trainings))

```

Find the correlation of training programs attended and designation using with(), cor().
```{r}

with(f,cor(Trainings,as.numeric(Desig)))
```

Using by() combine the operations of above questions (i) and (j) using function. And do the correlation analysis using cor() with in the function.
```{r}
by(data = f[c("Papers", "Trainings")], 
   INDICES = f["Desig"], 
   FUN = function(x) {cor(x[,1], x[,2])})

```

Plot average training programs attended against designations(only 3 designations) of the institution using plot()
```{r}
plot(f$Desig, f$Trainings)

```

Plot average papers published against designations of the institution using plot().
```{r}
plot(f$Desig, f$Papers)
```

Change the x axis , color and y-axis labels respectively. Add legends. 
```{r}
plot(f$Desig, f$Papers,xlab="Designation",ylab="Papers Published",col=3,main="Designation vs Papers Published")

```

Plot the above graphs in (l) and (m) using with() and plot().
```{r}
par(mfrow = c(1,2))
with(f, plot(Desig, Trainings, 
                   main = "Designation vs Trainings", 
                   xlab = "Designation", 
                   ylab = "Tranings",col=7))
with(f, plot(Desig, Papers, 
                   main = "Designation vs Papers Published", 
                   xlab = "Designation", 
                    ylab = "Papers Published ",col=8))


```

Draw scatter plot for above questions. Draw box plot for above question. Draw bar plots for above questions. Draw single variable plots for above question.
```{r}
par(mfrow = c(1,2))
with(f, plot(as.numeric(Desig), Trainings, 
                   main = "Designation vs Trainings", 
                   xlab = "Designation", 
                   ylab = "Tranings",col=1))
with(f, plot(as.numeric(Desig), Papers, 
                   main = "Designation vs Papers Published", 
                   xlab = "Designation", 
                    ylab = "Papers Published ",col=2))



```




```{r}

with(f,plot(Trainings))

```

plot the prof, asst.prof and asso.prof average performance in different colors using rep(), colorpalatte functions. Represent each designation average performance(no.of.papers published and training pgms atteneded) by different symbols.
```{r}

```
6a
```{r}

student<-read.csv("Tut-3.csv",header=TRUE)
head(student$Sub2,10)
```

```{r}
str(student)
#Sub2 is becoming factors as they contain String data
```

Convert the marks to numerical data and show.
```{r}
sub2<-student$Sub2
sub2

as.numeric(as.character(sub2))

```

Display the mark as factors.
```{r}
as.numeric(sub2)

```

 Display the marks as characters
```{r}
 as.character(sub2)
```
Display the type of marks columns
```{r}
typeof(as.numeric(as.character(sub2)))

```

using gsub remove character data in marks column. Using gsub remove numerical data in name column
```{r}
sub2
gsub("[^0-9]","",sub2)
names<-student$ï..Names
gsub("[^A-Za-z]","",names)
```

Clean the name and marks column and put it in a new student data set variable using transform function
```{r}
sub2.clean <- as.numeric(gsub("[^0-9.]", "", sub2))
sub2.clean
new_stud<-transform(student, Sub2 = sub2.clean)
new_stud

```

use table to get summary of student data
```{r}
table(student["Sub1"])
table(student["Dept"])
```

Use sapply to perform the cleaning of data mentioned above
```{r}
clean<-function(student)
{
  sub2.clean <- as.numeric(gsub("[^0-9.]", "", sub2))
  sub2.clean
  new_stud<-transform(student, Sub2 = sub2.clean)
  new_stud
}

sapply(student,FUN=clean)
```

 use lapply to perform the cleaning of data mentioned above
```{r}
clean<-function(student)
{
  sub2.clean <- as.numeric(gsub("[^0-9.]", "", sub2))
  sub2.clean
  new_stud<-transform(student, Sub2 = sub2.clean)
  new_stud
}

lapply(student,FUN=clean)

```

Display the summary using summary()
```{r}
summary(student)

```

Include gender details for students.Add Mr or Ms. For each student, using paste command . Display all students details.
```{r}

```

Define user defined functions to perform the above operations.
```{r}
naming<-function(Gender)
{
  
  if(Gender=='F')
    res="Mrs "
  else
    res="Mr "
  res
}
names=student$Gender
res<-sapply(names,FUN=naming)
d<-data.frame(res,student)
d
```

Use while loop, for loop to access students marks and find the grades. Put this with in a function
```{r}
grade<-function(s1,s2,s3,s4,s5)
{

  tot<-(s1+s2+s3+s4+s5)/5
  if(tot>=90)
    res<-"S"
  else if(tot>=75)
    res<-"A"
  else if(tot>=60)
    res<-"B"
  else if(tot>=50)
    res<-"C"
  else
    res<-"F"
  res
}

for(i in 1:nrow(student))
{
  
  
  s1<-as.numeric(student[i,"Sub1"])
  
  s2<-as.numeric(student[i,"Sub2"])
  
  s3<-as.numeric(student[i,"Sub3"])
  
  s4<-as.numeric(student[i,"Sub4"])
  
  s5<-as.numeric(student[i,"Sub5"])
  g<-grade(s1,s2,s3,s4,s5)
  print(as.character(student[i,"ï..Names"]))
  print(g)
  
}
```

Use apply, sapply, lapply and tapply to perform the above operation over all the columns of students
data set.
```{r}
grade<-function(s1)
{

  tot<-sum(s1)/5
  if(tot>=90)
    res<-"S"
  else if(tot>=75)
    res<-"A"
  else if(tot>=60)
    res<-"B"
  else if(tot>=50)
    res<-"C"
  else
    res<-"F"
  res
}

mark<-c(as.numeric(student[1,"Sub1"])+as.numeric(student[1,"Sub2"])+as.numeric(student[1,"Sub3"])+as.numeric(student[1,"Sub4"])+as.numeric(student[1,"Sub5"]))
sapply(mark,FUN=grade)
lapply(mark,FUN=grade)
tapply(mark,FUN=grade,INDEX=1)
```

Use with() function to apply the above operation over students dataset.
```{r}

```

Use any() function to apply the above operation over students dataset.
```{r}

```
7a
```{r}

s<-read.csv('Tut-4.csv',header=TRUE)
s
```

Change the column names of Student data set. 
```{r}
colnames(s)<-c("Name","Stud_USN","Stud_Dept","S1","S2","S3","S4","S5","Stud_Grade","Stud_Gender","Stud_CGPA")
summary(s)

```

Use map values() , as.factor() and transform ()
. To change the Grade column(S,A,B,etc) to have numerical values. 1- S, 2-A,           3-B,etc.;
. To change gender column 1-Male, 2-Female
```{r}
library(plyr)
s<-transform(s,
             Stud_Grade=as.factor(mapvalues(Stud_Grade,c("S","A","B","C","D","E","F"),c(1,2,3,4,5,6,7))),
             Stud_Gender=as.factor(mapvalues(Stud_Gender,c("M","F"),c(1,2))))
s

```

Using with() and tapply() , calculate the mean of marks in each subject scored by students in each
department and mean of CGPA of students in each dept with respect to gender. Format it for markdown
```{r}
library(knitr)
library(rmarkdown)
kable(with(s,tapply(S1, INDEX = list(Stud_Dept,Stud_Gender), FUN=mean)),format="markdown")
kable(with(s,tapply(S2, INDEX = list(Stud_Dept,Stud_Gender), FUN=mean)),format="markdown")
kable(with(s,tapply(S3, INDEX = list(Stud_Dept,Stud_Gender), FUN=mean)),format="markdown")
kable(with(s,tapply(S4, INDEX = list(Stud_Dept,Stud_Gender), FUN=mean)),format="markdown")
kable(with(s,tapply(S5, INDEX = list(Stud_Dept,Stud_Gender), FUN=mean)),format="markdown")

kable(with(s,tapply(Stud_CGPA, INDEX = list(Stud_Dept,Stud_Gender) , FUN=mean)),format="markdown")
```

Using with() and aggregate() , calculate the mean of marks in each subject scored by students in each department and the gender of students in each dept. Format it for markdown.
```{r}
kable(with(s,aggregate(S1,by=list(Stud_Dept,Stud_Gender),FUN=mean)),format="markdown")
kable(with(s,aggregate(S2,by=list(Stud_Dept,Stud_Gender),FUN=mean)),format="markdown")
kable(with(s,aggregate(S3,by=list(Stud_Dept,Stud_Gender),FUN=mean)),format="markdown")
kable(with(s,aggregate(S4,by=list(Stud_Dept,Stud_Gender),FUN=mean)),format="markdown")
kable(with(s,aggregate(S5,by=list(Stud_Dept,Stud_Gender),FUN=mean)),format="markdown")

```

Check whether the mean value of each subject marks in depts influenced by the gender of students in each dept or not. Do regression analysis using aggregate().
```{r}
aggregate(S1~Stud_Gender,FUN=mean, data=s)
aggregate(S2~Stud_Gender,FUN=mean, data=s)
aggregate(S3~Stud_Gender,FUN=mean, data=s)
aggregate(S4~Stud_Gender,FUN=mean, data=s)
aggregate(S5~Stud_Gender,FUN=mean, data=s)

```

Create the table output for mean scores in subjects in each dept gender wise. Use with() and table().
```{r}

ans<-with(s,table(S1,Stud_Gender))
ans
```

Find the odds of lower no. of mean marks in subjects with respect to gender of students in the depts using the output of question (f).
```{r}
ans.or<-as.numeric(ans[1,1])/as.numeric(ans[1,2])/as.numeric(ans[2,1])/as.numeric(ans[2,2])/as.numeric(ans[3,1])/as.numeric(ans[3,2])/as.numeric(ans[4,1])/as.numeric(ans[4,2])/as.numeric(ans[5,1])/as.numeric(ans[5,2])/as.numeric(ans[6,1])/as.numeric(ans[6,2])/as.numeric(ans[7,1])/as.numeric(ans[7,2])/as.numeric(ans[8,1])/as.numeric(ans[8,2])
ans.or
```

Is the Gender of students affects the CGPA of students? Check it with the data. Prove it.
```{r}
with(s, cor(Stud_CGPA, as.numeric(Stud_Gender)))

```

Find the correlation of Gender of students and Marks and CGPA scored using with(), cor().
```{r}
with(s,cor(Stud_CGPA[Stud_Gender==1],S1[Stud_Gender==1]))
with(s,cor(Stud_CGPA[Stud_Gender==2],S1[Stud_Gender==2]))

```

Using by() combine the operations of above questions (i) and (j) using function. And do the correlation analysis using cor() with in the function.
```{r}
by(data = s[c("S1", "Stud_CGPA")], 
   INDICES = s["Stud_Gender"], 
   FUN = function(x) {cor(x[,1], x[,2])})

```

Plot average marks in subjects , CGPA scored against depts of the institution using plot()
```{r}
par(mfrow = c(1,2))
plot(s$Stud_Dept,s$Stud_CGPA)
plot(s$Stud_Dept,s$S1)

```

Plot average marks in subjects , CGPA scored against gender in each dept of the institution using plot().
```{r}
par(mfrow = c(1,2))
plot(s$Stud_Gender,s$S1)
plot(s$Stud_Gender,s$Stud_CGPA)

```

Change the x axis , color and y-axis labels respectively. Add legends. 
```{r}
par(mfrow = c(1,2))
plot(s$Stud_Gender,s$S1,xlab="Gender",ylab="Sub 1",col=2)
plot(s$Stud_Gender,s$Stud_CGPA,xlab="Gender",ylab="CGPA",col=6)

```

Plot the above graphs in (l) and (m) using with() and plot().
```{r}
par(mfrow = c(1,2))
with(s, plot(Stud_Gender, S1, 
                   main = "Gender vs Sub 1", 
                   xlab = "Gender", 
                   ylab = "Sub1",col=7))
with(s, plot(Stud_Gender, Stud_CGPA, 
                   main = "Gender vs CGPA", 
                   xlab = "Gender", 
                    ylab = "CGPA",col=8))

```

Draw scatter plot for above questions. Draw box plot for above question. Draw bar plots for above questions. Draw single variable plots for above question.
```{r}
par(mfrow = c(1,2))
with(s, plot(as.numeric(Stud_Gender), S1, 
                   main = "Gender vs Sub 1", 
                   xlab = "Gender", 
                   ylab = "Sub1",col=7))
with(s, plot(as.numeric(Stud_Gender), Stud_CGPA, 
                   main = "Gender vs CGPA", 
                   xlab = "Gender", 
                    ylab = "CGPA",col=8))

```

```{r}
with(s,plot(S1))

```

plot the female students and male students performance in different colors using rep(), colorpalatte functions. Represent each gender's average performance(dept wise) by different symbols.
```{r}

```
9a
```{r}
f<-read.csv('Q9a.csv',header=TRUE)
head(f)

```

a. Change the column names of faculty data set. 
```{r}
colnames(f)<-c("Names","Desig","Salary","Dept","Trainings","Papers")
head(f)

```

b. Use with() and plot(), plot graph against dept and average Papers published.
```{r}
f1<-aggregate(Papers~Dept,f,mean)
f1
with(f1,plot(x=Dept,y=Papers))

```
c. Use qplot(), to plot the same mentioned in (b)
```{r}
library('ggplot2')
qplot(f1$Dept,f1$Papers)

```

d. Use qplot() with attributes color, shape, x and y labels.
```{r}
qplot(f1$Dept,f1$Papers,xlab="Department",ylab="Average Papers",colour="red",shape=factor(f1$Dept))

```

e. Display the dimension of faculty data set.
```{r}
nrow(f)
ncol(f)
```

f. using ggplot() and geom_point() , plot the same mentioned in (b)
```{r}
ggplot(data=f1,aes(x=Dept,y=Papers))+geom_point()

```

g. in ggplot() , change the point size.
```{r}
ggplot(data=f1,aes(x=Dept,y=Papers))+geom_point(size=2)

```

h. change color of points in ggplot().
```{r}

ggplot(data=f1,aes(x=Dept,y=Papers))+geom_point(size=2,colour="purple")
```

i. define your own color palatte and use it in ggplot()
```{r}
cbpallete<-c('#E69F00','#F6B4E9','#009E73','#F0EE22')
ggplot(data=f1,aes(x=Dept,y=Papers))+geom_point(colour=cbpallete)

```

j. Using facet_wrap(), plot for (f), with respect to desgination.(Prof, Asso prof, Asst Prof)
```{r}
f2<-aggregate(Papers~Dept+Desig,f,mean)
f2
ggplot(data=f2,aes(x=Dept,y=Papers))+geom_point()+facet_wrap(~Desig)
```

k. Using facet_grid(), perform the (j)
```{r}
ggplot(data=f2,aes(x=Dept,y=Papers))+geom_point()+facet_grid(.~Desig)
```

l. Draw bar graph for (b) using ggplot and geom_bar().
```{r}
ggplot(data=f1,aes(x=Dept,y=Papers))+geom_bar(stat="identity")
```

m. Add legends in graph.
```{r}
c4<-c("CSE","ISE","MECH","TCE")
ggplot(data=f1,aes(x=Dept,y=Papers,fill=c4))+geom_bar(stat="identity")
```

n. Draw smooth curves using stat_smooth() and by changing size for (b).
```{r}

f2<-aggregate(Papers~Dept+Desig,f,mean)
f2
ggplot(data=f2,aes(x=Dept,y=Papers))+geom_line()+stat_smooth()

```

o. Add title to ggplot() of your graph and draw regression lines and geom points for (b)
```{r}
ggplot(f1,aes(x=Dept,y=Papers)) + ggtitle("Average Papers per Dept")+geom_point()
  
```

p. Draw ggplot() for dept wise average training programs attened by Asst prof.
```{r}
f3<-f[f$Desig=="Assistant Professor",]
f4<-aggregate(Trainings~Dept,f3,mean)
f4
ggplot(f4,aes(x=Dept,y=Trainings))+geom_point()

```

q. Draw grom Polygon for (p)
```{r}

```
8a
```{r}
stud<-read.csv('Q8a.csv',header=TRUE)
head(stud)

```

a. Change the column names of stud data set. 
```{r}
colnames(stud)<-c("Name","USN","Department","S1","S2","S3","S4","S5","SGPA","Gender")
head(stud)

```

b. Use with() and plot(), plot graph against dept and average CGPA semesterwise.
```{r}
s<-aggregate(SGPA~Department,stud,mean)
s
with(s,plot(Department,SGPA,ylim=c(0,10)))
```

c. Use qplot(), to plot the same mentioned in (b)
```{r}
library('ggplot2')
qplot(s$Department,s$SGPA)

```

d. Use qplot() with attributes color, shape, x and y labels.
```{r}
qplot(s$Department,s$SGPA,xlab="Department",ylab="Average SGPA",colour='red')

```

e. Display the dimension of stud data set.
```{r}
nrow(stud)
ncol(stud)

```

f. using ggplot() and geom_point() , plot the same mentioned in (b)
```{r}
ggplot(data=s,aes(x=Department,y=SGPA))+geom_point()

```

g. in ggplot() , change the point size.
```{r}
ggplot(data=s,aes(x=Department,y=SGPA))+geom_point(aes(size=4))

```
h. change color of points in ggplot().
```{r}
ggplot(data=s,aes(x=Department,y=SGPA))+geom_point(colour="green")
```

i. define your own color palatte and use it in ggplot()
```{r}
cbpallete<-c('#E69F00','#F6B4E9','#009E73','#F0EE22','#F00000','#Eff000','#345670','#FFFF00','#098766')
ggplot(data=s,aes(x=Department,y=SGPA))+geom_point(colour=cbpallete)


```

j. Using facet_wrap(), plot for (f), with respect to dept
```{r}

ggplot(data=s,aes(x=Department,y=SGPA))+geom_point()+facet_wrap(~Department)
```

k. Using facet_grid(), perform the (j)
```{r}
ggplot(data=s,aes(x=Department,y=SGPA))+geom_point()+facet_grid(~Department)
```

l. Draw bar graph for (b) using ggplot and geom_bar().
```{r}
ggplot(data=s,aes(x=Department,y=SGPA))+geom_bar(stat = "identity")
```

m. Add legends in graph.
```{r}
c9<-c("BT","CHEM","CSE","ECE","EEE","IEM","ISE","MECH","TCE")

ggplot(data=s,aes(x=Department,y=SGPA,fill=c9))+geom_bar(stat = "identity")

```

n. Draw smooth curves using stat_smooth() and by changing size for (b)
```{r}
s2<-aggregate(SGPA~Department+Gender,stud,mean)
s2
ggplot(data=s2,aes(x=Department,y=SGPA))+geom_line(size=2)+stat_smooth()
```

o. Add title to ggplot() of your graph and draw regression lines and geom points for (b)
```{r}
ggplot(data=s,aes(x=Department,y=SGPA))+geom_point()+ggtitle("Dept vs SGPA")
```

p. Draw ggplot() for dept wise students' average CGPA.
```{r}
ggplot(data=s,aes(x=Department,y=SGPA))+geom_point()
```

q. Draw grom Polygon for (p)



